# Cron Job Setup Instructions for Morning Email System
# =====================================================

# This file explains how to set up a cron job on your Raspberry Pi
# to run the morning email script automatically every day.

# WHAT IS CRON?
# -------------
# Cron is a time-based job scheduler in Unix-like operating systems.
# It allows you to run scripts or commands automatically at specified times.

# CRON TIME FORMAT:
# ----------------
# * * * * * command-to-execute
# │ │ │ │ │
# │ │ │ │ └─── Day of week (0-7, where 0 and 7 are Sunday)
# │ │ │ └───── Month (1-12)
# │ │ └─────── Day of month (1-31)
# │ └───────── Hour (0-23)
# └─────────── Minute (0-59)

# EXAMPLE CRON SCHEDULES:
# ----------------------
# 0 7 * * *     → Run at 7:00 AM every day
# 30 8 * * *    → Run at 8:30 AM every day
# 0 6 * * 1-5   → Run at 6:00 AM on weekdays only (Monday-Friday)
# 0 9 * * 0,6   → Run at 9:00 AM on weekends only (Saturday and Sunday)


# STEPS TO SET UP THE CRON JOB:
# =============================

# 1. Make sure main.py is executable (run this in terminal):
chmod +x /home/pi/morning_emails_pi/main.py

# 2. Open the crontab editor (run this in terminal):
crontab -e

# 3. Add one of the following lines at the end of the file:

# Option A: Send email at 7:00 AM every day
0 7 * * * /usr/bin/python3 /home/pi/morning_emails_pi/main.py >> /home/pi/morning_emails_pi/logs/cron.log 2>&1

# Option B: Send email at 8:00 AM every day
0 8 * * * /usr/bin/python3 /home/pi/morning_emails_pi/main.py >> /home/pi/morning_emails_pi/logs/cron.log 2>&1

# Option C: Send email at 7:30 AM on weekdays only
30 7 * * 1-5 /usr/bin/python3 /home/pi/morning_emails_pi/main.py >> /home/pi/morning_emails_pi/logs/cron.log 2>&1


# EXPLANATION OF THE COMMAND:
# ---------------------------
# /usr/bin/python3                            → Python 3 interpreter path
# /home/pi/morning_emails_pi/main.py          → Your script path (ADJUST THIS!)
# >>                                          → Append output to file
# /home/pi/morning_emails_pi/logs/cron.log    → Log file path
# 2>&1                                        → Redirect errors to the same log file


# 4. Save and exit the editor:
#    - If using nano: Press Ctrl+X, then Y, then Enter
#    - If using vim: Press Esc, type :wq, then Enter

# 5. Create the logs directory (run this in terminal):
mkdir -p /home/pi/morning_emails_pi/logs

# 6. Verify your cron job was added (run this in terminal):
crontab -l


# TESTING YOUR CRON JOB:
# =====================

# Before setting up the cron job, test the script manually:
cd /home/pi/morning_emails_pi
python3 main.py

# If it works, you can set up the cron job!


# VIEWING CRON LOGS:
# =================

# To see if your cron job is running:
tail -f /home/pi/morning_emails_pi/logs/cron.log

# To see the last 50 lines of the log:
tail -n 50 /home/pi/morning_emails_pi/logs/cron.log


# TROUBLESHOOTING:
# ===============

# If cron job doesn't work:
# 1. Check cron service is running:
sudo systemctl status cron

# 2. Check system logs for cron errors:
grep CRON /var/log/syslog

# 3. Make sure Python can find the modules:
#    Use absolute paths for everything in the cron command

# 4. Test with a simple cron job first:
#    * * * * * echo "Test at $(date)" >> /home/pi/test_cron.log
#    This writes to the log file every minute


# DISABLING THE CRON JOB:
# ======================

# To temporarily disable, comment out the line in crontab:
# 1. Open crontab: crontab -e
# 2. Add # at the start of your cron job line
# 3. Save and exit

# To remove completely:
# 1. Open crontab: crontab -e
# 2. Delete the entire line
# 3. Save and exit


# NOTES:
# =====
# - Cron uses the system timezone, so check your Pi's timezone:
#   timedatectl
# 
# - To change timezone:
#   sudo timedatectl set-timezone Europe/Berlin
#
# - The Pi must be on and connected to internet at the scheduled time
#
# - Consider adding a retry mechanism if your internet connection is unstable

